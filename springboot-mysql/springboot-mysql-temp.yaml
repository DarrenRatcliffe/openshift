kind: Template
apiVersion: v1
metadata:
  name: springboot-mysql
  annotations:
    openshift.io/display-name: Springboot + MySQL (Persistent)
    description: >-
      A Springboot with a MySQL database template. For more information
      about using this template, including OpenShift considerations, see
      https://www.atos.net.
    tags: 'quickstart,springboot'
    iconClass: icon-spring
    template.openshift.io/long-description: >-
      This template defines resources needed to develop a Springboot application,
      including a build configuration, application deployment configuration, and
      database deployment configuration.
    template.openshift.io/provider-display-name: 'Atos SE'
    template.openshift.io/documentation-url: 'https://github.com/DarrenRatcliffe/openshift/blob/master/springboot-mysql/README.md'
    template.openshift.io/support-url: 'https://github.com/DarrenRatcliffe/openshift/blob/master/springboot-mysql/README.md'
message: >-
  The following service(s) have been created in your project: ${NAME},
  ${DATABASE_SERVICE_NAME}.


  For more information about using this template, including OpenShift
  considerations, see
  https://github.com/DarrenRatcliffe/openshift/blob/master/springboot-mysql/README.md.
labels:
  template: springboot-mysql-persistent
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
      database-user: '${DATABASE_USER}'
      database-password: '${DATABASE_PASSWORD}'
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
        kind: "Service"
        name: "${NAME}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: "${NAME}"
    name: springboot-s2i
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: jorgemoralespou/springboot-s2i
      from:
        kind: DockerImage
        name: jorgemoralespou/springboot-s2i
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: "${NAME}"
    name: "${NAME}"
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: "${NAME}"
    name: "${NAME}"
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: "${SOURCE_REPOSITORY_REF}"
        uri: "${SOURCE_REPOSITORY_URL}"
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: springboot-s2i:latest
      type: Source
    triggers:
    - github:
        secret: Ek7o7ltvSv58lP24LZH0
      type: GitHub
    - generic:
        secret: nwcKovQ-N0iTb5LnwGf2
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: "${NAME}"
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      app: "${NAME}"
      deploymentconfig: "${NAME}"
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: "${NAME}"
          deploymentconfig: "${NAME}"
      spec:
        containers:
        - image: ${NAME}:latest
          name: "${NAME}"
          env:
            - name: DATABASE_SERVICE_NAME
              value: '${DATABASE_SERVICE_NAME}'
            - name: DATABASE_ENGINE
              value: '${DATABASE_ENGINE}'
            - name: DATABASE_NAME
              value: '${DATABASE_NAME}'
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: '${NAME}'
                  key: database-user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '${NAME}'
                  key: database-password
          resources:
            limits:
              memory: '${MEMORY_LIMIT}'

            #- name: "BROOKLYN_LOCATION"
              #value: "${BROOKLYN_LOCATION}"
            #- name: "BROOKLYN_NAMESPACE"
              #value: "${BROOKLYN_NAMESPACE}"

          ports:
          - containerPort: 8080
            protocol: TCP
          #resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
    creationTimestamp: null
    labels:
      app: "${NAME}"
    name: "${NAME}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "${NAME}"
      deploymentconfig: "${NAME}"
  status:
    loadBalancer: {}
#Database stuff
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: '${DATABASE_SERVICE_NAME}'
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${VOLUME_CAPACITY}'
- kind: Service
  apiVersion: v1
  metadata:
    name: '${DATABASE_SERVICE_NAME}'
    annotations:
      description: Exposes the database server
  spec:
    ports:
      - name: mysql
        port: 3306
        targetPort: 3306
    selector:
      name: '${DATABASE_SERVICE_NAME}'
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: '${DATABASE_SERVICE_NAME}'
    annotations:
      description: Defines how to deploy the database
  spec:
    strategy:
      type: Recreate
    triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - mysql
          from:
            kind: ImageStreamTag
            namespace: '${NAMESPACE}'
            name: 'mysql:5.7'
      - type: ConfigChange
    replicas: 1
    selector:
      name: '${DATABASE_SERVICE_NAME}'
    template:
      metadata:
        name: '${DATABASE_SERVICE_NAME}'
        labels:
          name: '${DATABASE_SERVICE_NAME}'
      spec:
        volumes:
          - name: '${DATABASE_SERVICE_NAME}-data'
            persistentVolumeClaim:
              claimName: '${DATABASE_SERVICE_NAME}'
        containers:
          - name: mysql
            image: ' '
            ports:
              - containerPort: 3306
            volumeMounts:
              - name: '${DATABASE_SERVICE_NAME}-data'
                mountPath: /var/lib/mysql/data
            readinessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 5
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u
                    ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
            livenessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
            env:
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: '${NAME}'
                    key: database-user
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: '${NAME}'
                    key: database-password
              - name: MYSQL_DATABASE
                value: '${DATABASE_NAME}'
            resources:
              limits:
                memory: '${MEMORY_MYSQL_LIMIT}'
#new parameters
parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the frontend objects defined in this template.
    required: true
    value: springboot-mysql-persistent
  - name: NAMESPACE
    displayName: Namespace
    description: The OpenShift Namespace where the ImageStream resides.
    required: true
    value: openshift
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the CakePHP container can use.
    required: true
    value: 512Mi
  - name: MEMORY_MYSQL_LIMIT
    displayName: Memory Limit (MySQL)
    description: Maximum amount of memory the MySQL container can use.
    required: true
    value: 512Mi
  - name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: 'Volume space available for data, e.g. 512Mi, 2Gi'
    value: 1Gi
    required: true
  - name: SOURCE_REPOSITORY_URL
    displayName: Git Repository URL
    description: The URL of the repository with your application source code.
    required: true
    value: 'https://github.com/cloudfoundry-samples/spring-music.git'
  - name: SOURCE_REPOSITORY_REF
    displayName: Git Reference
    description: >-
      Set this to a branch name, tag or other ref of your repository if you are
      not using the default branch.
  - name: CONTEXT_DIR
    displayName: Context Directory
    description: >-
      Set this to the relative path to your project if it is not in the root of
      your repository.
  - name: APPLICATION_DOMAIN
    displayName: Application Hostname
    description: >-
      The exposed hostname that will route to the Springboot service, if left blank
      a value will be defaulted.
    value: ''
  - name: GITHUB_WEBHOOK_SECRET
    displayName: GitHub Webhook Secret
    description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    generate: expression
    from: '[a-zA-Z0-9]{40}'
  - name: DATABASE_SERVICE_NAME
    displayName: Database Service Name
    required: true
    value: mysql
  - name: DATABASE_ENGINE
    displayName: Database Engine
    description: 'Database engine: postgresql, mysql or sqlite (default).'
    required: true
    value: mysql
  - name: DATABASE_NAME
    displayName: Database Name
    required: true
    value: default
  - name: DATABASE_USER
    displayName: Database User
    required: true
    value: dbuser
  - name: DATABASE_PASSWORD
    displayName: Database Password
    generate: expression
    from: '[a-zA-Z0-9]{16}'
